name: GitHub CI

# 'on' controls when this script is run.
on:
  pull_request: # This means every time a PR is made, the script runs.
  workflow_dispatch: # This means when looking at the repo, you can click 'actions' then 'GitHub CI', and select 'Run Workflow' on any targets branch .
  push: # This means after a push (to main branch) This script also runs, just to be sure everything is fine.
    tags:
      - "*"
    branches:
      - main

# Environment Variables
env:
  MAIN_PYTHON_VERSION: '3.10' # We need 3.9 for building sphinx
  LIBRARY_NAME: 'ansys-turbogrid-core' # The repo name
  LIBRARY_NAMESPACE: 'ansys.turbogrid.core'
  DOCUMENTATION_CNAME: 'turbogrid.docs.pyansys.com'
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'

# This deals with concurrent runs of this script.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # This means multiple runs of the same script on the same branch will cancel the oldest ones.

# Under here we have the scheduler graph of all the jobs, each being a vertex, directed by the 'needs:' fields (needs describes a child node).
jobs:

# The style job will fail if any changes are needed by any styler. 
# The best way to avoid these failures is to install the styler on your vscode, with format-on-save.
# There are numerous internet tutorials to follow for all the installation and settings configurations.
  code-style:
    name: "Code Style Checks"
    runs-on: ubuntu-latest
    steps:
      - name: "PyAnsys code style checks"
        uses: ansys/actions/code-style@v4 # This action looks in .pre-commit-config.yaml for code check tasks.
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation Style Checks"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  
  
  doc-build:
# Documentation is built in the environment of this script run,
# it is uploaded as a build artifact, then sent to the doc website.
    name: "Documentation"
    needs: [doc-style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # This checks out the repo, with the base directory being the base repo directory.

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # 3.9 is required for Sphinx


# Using the newest version of pip, install all the dependencies.
# The syntax .[NAME] refers to the project.optional-dependencies in pyproject.toml
      - name: "Install packages for documentation build"
        run: |
          python -m venv ./.venv
          source ./.venv/bin/activate
          python -m pip install -U pip
          python -m pip install .
          python -m pip install .[doc]

      - name: Build the documentation (HTML)
        run: |
          source ./.venv/bin/activate
          cd doc
          make html
 
# Upload the doc/build/html folder as a build artifact.
# You can see the artifact on the action page, if the run succeeded.
      - name: "Upload HTML documentation"
        uses: actions/upload-artifact@v3
        with:
          name: "documentation-html"
          path: doc/_build/html
          retention-days: 7

# Currently, we update the doc on every script run.
# TODO: we need a better system for controlling when documentation is updated.
      - name: "Deploy dev doc"
        uses: ansys/actions/doc-deploy-dev@v4
        with:
          doc-artifact-name: 'documentation-html'
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

# # Stable doc, which is versioned, but I don't know how yet.
#      - name: "Deploy release doc"
#        uses: ansys/actions/doc-deploy-stable@v4
#        with:
#          doc-artifact-name: 'documentation-html'
#          cname: ${{ env.DOCUMENTATION_CNAME }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          python-version: ${{ env.MAIN_PYTHON_VERSION }}


# The build job is responsible for creating the build artifact and uploading it to PYPI using twine.
  build:
    name: Build
    needs: [code-style]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Pull PyTurboGrid API Package
        run: |
          python -m pip install ansys-turbogrid-api 

      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}

      - name: "Build a wheelhouse of the Python library"
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: windows-latest
          python-version: '3.10'


# Only a tagged commit that begins with 'v' will get pushed to the index.
# The developer MUST make sure that:
#   1. The commit has this tag
#   2. The commit is done within a matching branch release/v*
#   3. The file src\ansys\turbogrid\core\__init__.py's __version__ is updated to match the above 2.
      - name: "Release to the private PyPI repository"
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: ansys/actions/release-pypi-private@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
