[{"objectID":"Home","href":"examples/mbr_STAC_Example.html#multi-blade-stac-example","title":"Multi-blade STAC example","text":"Multi-blade STAC example\n\nThis  example shows how to set up a multi blade row meshing instance using a TGMachine file. It is  based on the\nSTAC machine, a case provided by the Institute of Thermal Turbomachinery and Machinery Laboratory at the University of Stuttgart.\n\nFor the details see the paper on the STAC Machine: https://www.itsm.uni-stuttgart.de/en/research/test-cases/STAC/,  DOI: 10.1177/0957650919833207\n\nSETTING SPECIFIC PARAMETERS\nTo set specific parameters for the individual blade rows, the pyturbogrid instance of the row can be accessed via the mbr.tg_worker_instances dictionary\nTo do so the set_obj_param function is used with the keywords from the command editor in TurboGrid\nExample: “Number Of Outlet Elements = 5” in MESH DATA –>  set_obj_param(object=’/MESH DATA’,param_val_pairs=’Number Of Outlet Elements = 5’)\n\n\n\nDownload Jupyter notebook: mbr_STAC_Example.ipynb\n\nDownload Python source code: mbr_STAC_Example.py\n\nDownload zipped: mbr_STAC_Example.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"index.html#pyturbogrid-documentation-054","title":"PyTurboGrid documentation 0.5.4","text":"PyTurboGrid documentation 0.5.4"},{"objectID":"Home","href":"index.html#introduction","title":"PyTurboGrid documentation 0.5.4 > Introduction","text":"Introduction\n\nAnsys TurboGrid is a high-quality turbomachinery meshing software app. It features\nnovel automated mesh generation capabilities in a simple-to-use, streamlined\nworkspace. You can apply the tools in TurboGrid to a wide variety of turbomachinery\nequipment to help produce accurate simulation results."},{"objectID":"Home","href":"index.html#what-is-pyturbogrid","title":"PyTurboGrid documentation 0.5.4 > What is PyTurboGrid?","text":"What is PyTurboGrid?\n\nPyTurboGrid is part of the larger PyAnsys\neffort to facilitate the use of Ansys technologies directly from Python.\nPyTurboGrid implements a client-server architecture. Communication between\nPyTurboGrid (client) and the running TurboGrid process (server) is based on\nthe plain TCP/IP technology. However, you need to interact only with the\nPython interface.\n\nYou can use PyTurboGrid to programmatically launch an instance of TurboGrid,\nload a model, read in a session file, generate a mesh, and query statistics\nfor this mesh.\n\nPyTurboGrid lets you use TurboGrid within a Python environment of your choice\nin conjunction with other PyAnsys libraries and external Python libraries.\n\n"},{"objectID":"Home","href":"index.html#project-index","title":"PyTurboGrid documentation 0.5.4 > Project index","text":"Project index\n\ngenindex"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys repository appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyTurboGrid.\n\nThe following contribution information is specific to PyTurboGrid."},{"objectID":"Contribute","href":"contributing.html#clone-the-repository","title":"Contribute > Clone the repository","text":"Clone the repository\n\nTo clone the PyTurboGrid repository and install the latest PyTurboGrid release\nin development mode, run these commands:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyTurboGrid Issues page\nto submit questions, report bugs, and request new features. When possible, use\nthese issue templates:\n\nBug, problem, error: For filing a bug report\n\nDocumentation error: For requesting modifications to the documentation\n\nAdding an example: For proposing a new example\n\nNew feature: For requesting enhancements to the code\n\nIf your issue does not fit into one of these template categories, you can click\nthe link for opening a blank issue.\n\nTo reach the project support team, email pyansys.core@ansys.com."},{"objectID":"Contribute","href":"contributing.html#view-documentation","title":"Contribute > View documentation","text":"View documentation\n\nDocumentation for the latest stable release of PyTurboGrid is hosted at\nPyTurboGrid documentation.\n\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions."},{"objectID":"Contribute","href":"contributing.html#adhere-to-code-style","title":"Contribute > Adhere to code style","text":"Adhere to code style\n\nPyTurboGrid follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys Developer’s Guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run these\ncommands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it is not possible for you to push code that fails the style checks:\n\n\n\n"},{"objectID":"Home","href":"api_reference/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section provides descriptions of the modules, classes, functions,\nand methods in the PyTurboGrid API.\n\n"},{"objectID":"Home","href":"api_reference/multi_blade_row.html#multi_blade_row","title":"multi_blade_row","text":"multi_blade_row\n\n\n\n\n\nModule for working on a multi blade row turbomachinery case using PyTurboGrid instances in parallel.\n\nClasses:\n\n\n\n\n\nclass ansys.turbogrid.core.multi_blade_row.multi_blade_row.InitStyle(value)\n\nBases: IntEnum\n\nAn enumeration.\n\n\n\nclass ansys.turbogrid.core.multi_blade_row.multi_blade_row.MachineSizingStrategy(value)\n\nBases: IntEnum\n\nThese are machine sizing strategies that can be optionally applied using set_machine_sizing_strategy.\n\n\n\nclass ansys.turbogrid.core.multi_blade_row.multi_blade_row.multi_blade_row(turbogrid_location_type=TurboGridLocationType.TURBOGRID_INSTALL, tg_container_launch_settings: dict[str, str] = {}, turbogrid_path: str | None = None, tg_kw_args={}, log_prefix: str = '', log_level=TurboGridLogLevel.INFO)\n\nBases: object\n\nThis class spawns multiple TG instances and can initialize and control an entire blade row at once.\n\nMethods:\n\n\n\n\n\n__init__(turbogrid_location_type=TurboGridLocationType.TURBOGRID_INSTALL, tg_container_launch_settings: dict[str, str] = {}, turbogrid_path: str | None = None, tg_kw_args={}, log_prefix: str = '', log_level=TurboGridLogLevel.INFO)\n\nInitialize the MBR object\n\n\n\ndisable_lma()\n\nSets the Turbo Transform type to block-structured (workaround for LMA issues. Advanced use only.)\n\n\n\nget_all_worker_errors() -> dict[str, list[str]]\n\nGet any error messages from the individual TG worker instances.\nThis also removes them from the internal queues.\n\n\n\nget_available_domains() -> dict[str, list[str]]\n\nGets the available domains for each blade row.\n\n\n\nget_average_background_face_areas() -> dict\n\nQuery the background topology face areas for each blade row.\nThis is TurboGrid specific information.\n\n\n\nget_average_base_face_areas() -> dict\n\nQuery the base topology face areas for each blade row.\nThis is TurboGrid specific information.\n\n\n\nget_element_counts() -> dict\n\nQuery the element count for each blade row.\n\n\n\nget_local_gsf() -> dict\n\nQuery the blade-row-local global size factor for each blade row.\n\n\n\nget_mesh_statistics() -> dict[str, any]\n\nText to be added\n\n\n\nget_mesh_statistics_histogram_data(target_statistic: str, custom_bin_limits: list | None = None, custom_bin_units: str | None = None) -> dict[str, any]\n\nText to be added\n\n\n\nget_number_of_blade_sets() -> dict[str, int]\n\nGets the number of blade sets for all the blade rows.\n\n\n\nget_spanwise_element_counts() -> dict\n\nQuery the number of spanwise elements for each blade row.\n\n\n\ninit_from_ndf(ndf_path: str, use_existing_tginit_cad: bool = False, tg_log_level: TurboGridLogLevel = TurboGridLogLevel.INFO)\n\nInitialize the MBR representation with an ndf file.\nThe file must be compatible with TurboGrid import ndf.\n\n\n\ninit_from_tgmachine(tgmachine_path: str, tg_log_level: TurboGridLogLevel = TurboGridLogLevel.INFO, disable_lma: bool = False)\n\nInitialize the MBR representation with a TGMachine file.\nStill under development\n\n\n\nplot_machine()\n\nDisplay the machine’s mesh boundaries using pyvista.\nExperimental.\n\n\n\nquit()\n\nThis method will quit all TG instances.\n\n\n\nsave_meshes(optional_prefix: str | None = None) -> list[str]\n\nWrite out the .def files representing the entire blade row.\nBlade rows that threw errors will not write meshes (check the logs.)\nThe assembly can be opened directly in CFX-Pre (Meshes contain some topology.)\n\n\n\nsave_states(optional_prefix: str | None = None) -> dict[str, str]\n\nWrite out the .tst files representing each TG instance.\n\n\n\nset_global_size_factor(blade_row_name: str, size_factor: float)\n\nSet the blade-row-local global size factor for blade_row_name.\n\n\n\nset_inlet_outlet_parametric_positions(blade_row_name: str, inlet_hs=[], outlet_hs=[])\n\nSet the position of the inlet/outlet blocks within the blade row mesh for blade_row_name.\n\n\n\nset_machine_base_size_factors(size_factors: dict[str, float])\n\nManual setting for per-blade-row sizings, and set the machine size factor to 1.0.\n\n\n\nset_machine_size_factor(size_factor: float)\n\nSet the entire machine’s size factor. Higher means more (and smaller) elements.\n\n\n\nset_machine_sizing_strategy(strategy: MachineSizingStrategy)\n\nSet the automatic machine sizing strategy for this machine.\nThe machine simulation must be initialized already.\n\n\n\nset_machine_target_node_count(target_node_count: int)\n\nInstead of size factors, a target node count can be specified.\nLess robust but more predictable than using a size factor.\nCount must be over 50,000, and a count too high may be problematic.\n\n\n\nset_number_of_blade_sets(blade_row_name: str, number_of_blade_sets: int)\n\nSet the number of blade sets for blade_row_name."},{"objectID":"Home","href":"api_reference/multi_blade_row.html#description","title":"multi_blade_row > Description","text":"Description\n\nNONE\n\nNo strategy applied. Blade Row sizings must be manually controlled via any one of:\n\nset_global_size_factor\nset_machine_base_size_factors\nset_machine_size_factor\nset_machine_target_node_count\n\nMIN_FACE_AREA\n\nThis strategy attempts to size each blade row so that the element sizes are all equal,\nby using the blade row with the smallest face area as the target.\nThis is the most robust strategy, although can result in many elements for the larger blade rows,\nand if the blade row is too large, the sizing may be huge."},{"objectID":"Home","href":"api_reference/multi_blade_row.html#parameters","title":"multi_blade_row > Parameters","text":"Parameters\n\nturbogrid_location_type\n\nPyTurboGrid.TurboGridLocationType, default: TURBOGRID_INSTALL\n\nFor container/cloud operation, this can be changed. Generally only used by devs/github.\n\ntg_container_launch_settings\n\ndict[str, str], default: {}\n\nFor dev usage.\n\nturbogrid_path\n\nstr, default: None\n\nOptional specifying for cfxtg path. Otherwise, launcher will attempt to find it automatically."},{"objectID":"Home","href":"api_reference/multi_blade_row.html#parameters","title":"multi_blade_row > Parameters","text":"Parameters\n\nndf_path\n\nstr\n\nThe full absolute path and file name for the ndf file.\n\nuse_existing_tginit_cad\n\nbool, default: False\n\nIf true, a .tginit and .x_b file with the same name as the ndf_path will be used.\nIf false, TG will (re)generate these files.\n\ntg_log_level\n\nPyTurboGrid.TurboGridLogLevel, default: INFO\n\nLogging settings for the underlying TG instances.\nThe log_filename_suffix will be the ndf file name, and the flowpath for the worker instances."},{"objectID":"Home","href":"examples/multi_blade_row_batch_example.html#multi-blade-row-meshing-example","title":"Multi blade row meshing example","text":"Multi blade row meshing example\n\nThis basic example shows how to set up a multi blade row meshing instance and execute it in parallel."},{"objectID":"Home","href":"examples/multi_blade_row_batch_example.html#perform-required-imports","title":"Multi blade row meshing example > Perform required imports","text":"Perform required imports\n\nPerform the required imports. It is assumed that the ansys-turbogrid-core\npackage has been installed."},{"objectID":"Home","href":"examples/multi_blade_row_batch_example.html#create-and-use-a-multibladerow-instance","title":"Multi blade row meshing example > Create and use a MultiBladeRow instance","text":"Create and use a MultiBladeRow instance\n\nCreate a MultiBladeRow instance, set it up for a multi blade row case and execute.\n\n\n\nDownload Jupyter notebook: multi_blade_row_batch_example.ipynb\n\nDownload Python source code: multi_blade_row_batch_example.py\n\nDownload zipped: multi_blade_row_batch_example.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#basic-mesh-generation","title":"Basic mesh generation","text":"Basic mesh generation\n\nThis basic example shows how to launch PyTurboGrid, load a blade model\nby reading an INF file, and generate a mesh."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#model-overview","title":"Basic mesh generation > Model overview","text":"Model overview"},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#perform-required-imports","title":"Basic mesh generation > Perform required imports","text":"Perform required imports\n\nPerform the required imports. It is assumed that the ansys-turbogrid-core\npackage has been installed."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#launch-turbogrid-instance","title":"Basic mesh generation > Launch TurboGrid instance","text":"Launch TurboGrid instance\n\nLaunch a TurboGrid instance in the most basic way."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#find-turbogrid-examples","title":"Basic mesh generation > Find TurboGrid examples","text":"Find TurboGrid examples\n\nFind the examples folder for TurboGrid based on the path to the directory\nwhere it is installed. Calling the get_turbogrid_exe_path() method ensures\nuse of the examples folder in the current TurboGrid installation."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#ensure-folder-with-examples-exists","title":"Basic mesh generation > Ensure folder with examples exists","text":"Ensure folder with examples exists\n\nEnsure that the examples folder exists."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#read-file-for-rotor37-example","title":"Basic mesh generation > Read file for rotor37 example","text":"Read file for rotor37 example\n\nRead the BladeGen INF file for the rotor37 example."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#generate-mesh","title":"Basic mesh generation > Generate mesh","text":"Generate mesh\n\nGenerate a mesh with the default settings."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#get-mesh-statistics","title":"Basic mesh generation > Get mesh statistics","text":"Get mesh statistics\n\nGet the mesh statistics from the current session."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#print-mesh-statistics","title":"Basic mesh generation > Print mesh statistics","text":"Print mesh statistics\n\nPrint the mesh statistics in a format suitable for reading.\nA JSON serializer can print nested dictionary content with indentation\nand formatting."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#save-mesh","title":"Basic mesh generation > Save mesh","text":"Save mesh\n\nSave the mesh."},{"objectID":"Home","href":"examples/basic_read_inf_rotor37.html#quit-session","title":"Basic mesh generation > Quit session","text":"Quit session\n\nQuit the TurboGrid session.\n\n\n\nDownload Jupyter notebook: basic_read_inf_rotor37.ipynb\n\nDownload Python source code: basic_read_inf_rotor37.py\n\nDownload zipped: basic_read_inf_rotor37.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/mbr_from_tginit_example.html#multi-blade-row-meshing-example","title":"Multi blade row meshing example","text":"Multi blade row meshing example\n\nThis basic example shows how to set up a multi blade row meshing instance and execute it in parallel."},{"objectID":"Home","href":"examples/mbr_from_tginit_example.html#perform-required-imports","title":"Multi blade row meshing example > Perform required imports","text":"Perform required imports\n\nPerform the required imports. It is assumed that the ansys-turbogrid-core\npackage has been installed."},{"objectID":"Home","href":"examples/mbr_from_tginit_example.html#create-a-multi_blade_row-and-initialize-it","title":"Multi blade row meshing example > Create a multi_blade_row and initialize it","text":"Create a multi_blade_row and initialize it\n\nUse the Concepts NREC sample provided.\n\n\n\nDownload Jupyter notebook: mbr_from_tginit_example.ipynb\n\nDownload Python source code: mbr_from_tginit_example.py\n\nDownload zipped: mbr_from_tginit_example.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api_reference/ndf_parser.html#ndf_parser","title":"ndf_parser","text":"ndf_parser\n\n\n\n\n\nModule for facilitating parsing on NDF file.\n\nClasses:\n\n\n\n\n\nclass ansys.turbogrid.core.ndf_parser.ndf_parser.NDFParser(ndf_file_full_name: str)\n\nBases: object\n\nFacilitates parsing of NDF file and finding various details about the blade rows.\n\nMethods:\n\n\n\n\n\n__init__(ndf_file_full_name: str)\n\nInitialize the class using name with full path of an NDF file.\n\n\n\nget_blade_row_blades() -> dict\n\nGet the name of the blade rows and blades in each row."},{"objectID":"Home","href":"api_reference/ndf_parser.html#parameters","title":"ndf_parser > Parameters","text":"Parameters\n\nndf_file_full_name\n\nstr\n\nName with full path of the NDF file to be parsed."},{"objectID":"Home","href":"api_reference/ndf_parser.html#returns","title":"ndf_parser > Returns","text":"Returns\n\ndict\n\nThe names of the blade rows and blade in each row return in the form:\n{ “bladerow1” : [“blade1”, ], “bladerow2” : [“blade2”, “splitter1”, ], … }\n\nIf a blade row has no name in the NDF file, a name in the form “bladerowIndex”\nwill be assigned where Index is the position of the row in the NDF file among the\nrows starting at position 1."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#mesh-statistics-report","title":"Mesh statistics report","text":"Mesh statistics report\n\nTo generate a mesh statistics report, you use the mesh_statistics module\nand CCL (CFX command language) queries. This example shows how to generate\na mesh statistics report for the blade model in the read_inf_rotor37\nexample.\n\nJinja is used to generate\nthis report in HTML format, starting from the report_template.html file."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#report-for-rotor37","title":"Mesh statistics report > Report for rotor37","text":"Report for rotor37"},{"objectID":"Home","href":"examples/mesh_statistics_report.html#perform-required-imports","title":"Mesh statistics report > Perform required imports","text":"Perform required imports\n\nNote: This example requires the jinja2 module to be installed before python is executed:\n\nPerform the required imports."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#set-up-a-turbogrid-session","title":"Mesh statistics report > Set up a TurboGrid session","text":"Set up a TurboGrid session\n\nSet up a TurboGrid session with a basic case and mesh, similar to the\nread_inf_rotor37 example."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#determine-domains","title":"Mesh statistics report > Determine domains","text":"Determine domains\n\nDetermine which domains are available by querying the CCL (CFX command\nlanguage)."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#set-up-case-details","title":"Mesh statistics report > Set up case details","text":"Set up case details\n\nSet up the information to show under “Case Details” in the report."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#create-meshstatistics-object","title":"Mesh statistics report > Create MeshStatistics object","text":"Create MeshStatistics object\n\nCreate the MeshStatistics object for obtaining the mesh statistics."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#calculate-and-store-mesh-statistics","title":"Mesh statistics report > Calculate and store mesh statistics","text":"Calculate and store mesh statistics\n\nCalculate and store the basic mesh statistics for each domain separately and\nfor all domains."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#check-loaded-mesh-statistics","title":"Mesh statistics report > Check loaded mesh statistics","text":"Check loaded mesh statistics\n\nCheck the currently loaded mesh statistics to ensure that they are for all\ndomains."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#get-mesh-statistics-table-information","title":"Mesh statistics report > Get mesh statistics table information","text":"Get mesh statistics table information\n\nGet the mesh statistics table information in a form that can easily be used to\ngenerate the table in the report."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#generate-histograms","title":"Mesh statistics report > Generate histograms","text":"Generate histograms\n\nGenerate histograms for all required mesh quality measures."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#quit-session","title":"Mesh statistics report > Quit session","text":"Quit session\n\nQuit the TurboGrid session as all of the relevant information has now been\nassembled."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#set-up-jinja-library","title":"Mesh statistics report > Set up Jinja library","text":"Set up Jinja library\n\nSet up the Jinja library with the relevant template and data.\n\nYou must have a local (downloaded) copy of the report template\nreport_template.html.\nThis is located in the examples directory of the pyturbogrid source code. If\nyou do not have the pyturbogrid source code available, the template can be\ndownloaded from report_template.html.\n\nThe python command below assumes that the example is being executed by running\nthe mesh_statistics_report.py script non-interactively and that the\nreport_template.html file is located in the same directory as the script.\nOtherwise, ospath.dirname(__file__) must be replaced with the name of the\nfolder that contains the report_template.html file."},{"objectID":"Home","href":"examples/mesh_statistics_report.html#generate-report","title":"Mesh statistics report > Generate report","text":"Generate report\n\nGenerate the HTML report.\n\n\n\nDownload Jupyter notebook: mesh_statistics_report.ipynb\n\nDownload Python source code: mesh_statistics_report.py\n\nDownload zipped: mesh_statistics_report.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api_reference/launcher.html#launcher","title":"launcher","text":"launcher\n\n\n\n\n\nModule for launching a local instance of Ansys TurboGrid.\n\nClasses:\n\n\n\nFunctions:\n\n\n\n\n\nclass ansys.turbogrid.core.launcher.launcher.TurboGridVersion(value)\n\nBases: Enum\n\nProvide an enumeration over supported TurboGrid versions.\n\nAttributes:\n\n\n\n\n\nversion_23R2 = '23.2.0'\n\n\n\n\n\nversion_24R1 = '24.1.0'\n\n\n\n\n\nversion_24R2 = '24.2.0'\n\n\n\n\n\nversion_25R1 = '25.1.0'\n\n\n\n\n\nversion_25R2 = '25.2.0'\n\n\n\n\n\nversion_26R1 = '26.1.0'\n\n\n\n\n\nansys.turbogrid.core.launcher.launcher.get_latest_ansys_version() -> str\n\nGet the latest installed Ansys version from AWP_ROOTxxx environment variables.\n\nThe xxx is the three-digit Ansys version. For example, the AWP_ROOT232\nenvironment variable specifies the path to the directory where Ansys 2023 R2\nis installed. If Ansys 2023 R2 is installed in the default directory on Windows,\nthe value for this environment variable is C:\\Program Files\\ANSYS Inc\\v232.\n\n\n\nansys.turbogrid.core.launcher.launcher.get_turbogrid_exe_path(**launch_argvals) -> Path\n\nGet the path to a local installation of TurboGrid.\n\nThe path is obtained by searching in this order:\n\nThe path specified by the turbogrid_path parameter from launch_argvals.\n\nThe path specified by the PYTURBOGRID_TURBOGRID_ROOT environment variable.\n\nThe path of the TurboGrid installation specified by the product_version parameter\nfrom launch_argvals, using the corresponding AWP_ROOTxxx environment variable.\n\nThe path of the TurboGrid installation from the AWP_ROOTxxx environment variable for\nthe latest installed Ansys version.\n\n\n\nansys.turbogrid.core.launcher.launcher.launch_turbogrid(product_version: str | None = None, turbogrid_path: str | None = None, log_level: TurboGridLogLevel = TurboGridLogLevel.INFO, turbogrid_location_type=TurboGridLocationType.TURBOGRID_INSTALL, additional_args_str: str | None = None, additional_kw_args: dict | None = None, port: int | None = None, host: str = '127.0.0.1', log_filename_suffix: str = '', **kwargs) -> PyTurboGrid\n\nLaunch TurboGrid locally in server mode.\n\n\n\nansys.turbogrid.core.launcher.launcher.launch_turbogrid_ansys_labs(product_version: str = 'latest', log_level: TurboGridLogLevel = TurboGridLogLevel.INFO) -> PyTurboGrid\n\nLaunch TurboGrid from within the Ansys Labs environment.\n\n\n\nansys.turbogrid.core.launcher.launcher.launch_turbogrid_container(cfxtg_command_name, image_name, container_name, cfx_version, license_file, keep_stopped_containers, container_env_dict) -> deployed_tg_container\n\n"},{"objectID":"Home","href":"api_reference/launcher.html#returns","title":"launcher > Returns","text":"Returns\n\nstr\n\nLatest installed Ansys version in this format: \"23.2.0\"."},{"objectID":"Home","href":"api_reference/launcher.html#returns","title":"launcher > Returns","text":"Returns\n\nPath\n\nPath of a local TurboGrid installation."},{"objectID":"Home","href":"api_reference/launcher.html#parameters","title":"launcher > Parameters","text":"Parameters\n\nproduct_version\n\nstr, default: None\n\nVersion of TurboGrid to use in the numeric format. For example, \"23.2.0\"\nfor 2023 R2. The default is None, in which case the latest installed\nversion is used.\n\nturbogrid_path\n\nstr, default: None\n\nPath to the cfxtg command for starting TurboGrid. The default is None,\nin which case the value for the product_version parameter is used.\n\nlog_level\n\npyturbogrid_core.PyTurboGrid.TurboGridLogLevel, default: INFO\n\nLevel of logging information written to the terminal. The default is INFO.\nOptions are INFO, WARNING, ERROR, CRITICAL, and DEBUG.\nThis setting also affects the level of output that is written to the log files.\n\nadditional_args_str\n\nstr, default: None\n\nAdditional arguments to send to TurboGrid.\n\nadditional_kw_args\n\ndict, default: None\n\nAdditional arguments to send to TurboGrid.\n\nport\n\nint, default: None\n\nPort for TurboGrid communications. The default is None, in which case\nan available port is automatically selected.\n\nhost\n\nstr, default: 127.0.0.1 (this is the local host IP for windows and linux)\n\nHost for TurboGrid communications. The default is 127.0.0.1, or the local host\n\nlog_filename_suffix\n\nstr, default: “”\n\nSuffix for name of the log files written out."},{"objectID":"Home","href":"api_reference/launcher.html#returns","title":"launcher > Returns","text":"Returns\n\npyturbogrid_core.PyTurboGrid\n\nTurboGrid session."},{"objectID":"Home","href":"api_reference/launcher.html#parameters","title":"launcher > Parameters","text":"Parameters\n\nproduct_version\n\nstr, default: latest\n\nVersion of TurboGrid to launch in the Ansys Labs environment. Only certain versions are supported.\n\nlog_level\n\npyturbogrid_core.PyTurboGrid.TurboGridLogLevel, default: INFO\n\nLevel of logging information written to the terminal. The default is INFO.\nOptions are INFO, WARNING, ERROR, CRITICAL, and DEBUG.\nThis setting also affects the level of output that is written to the log files."},{"objectID":"Home","href":"api_reference/launcher.html#returns","title":"launcher > Returns","text":"Returns\n\npyturbogrid_core.PyTurboGrid\n\nTurboGrid session."},{"objectID":"Home","href":"examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 6 files from examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_basic_read_inf_rotor37.py (basic_read_inf_rotor37.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_STAC_Example.py (mbr_STAC_Example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_from_tginit_example.py (mbr_from_tginit_example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_sweep_example.py (mbr_sweep_example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mesh_statistics_report.py (mesh_statistics_report.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_multi_blade_row_batch_example.py (multi_blade_row_batch_example.py)\n\n00:00.000\n\n0.0"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 6 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_basic_read_inf_rotor37.py (../../examples/basic_read_inf_rotor37.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_STAC_Example.py (../../examples/mbr_STAC_Example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_from_tginit_example.py (../../examples/mbr_from_tginit_example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mbr_sweep_example.py (../../examples/mbr_sweep_example.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_mesh_statistics_report.py (../../examples/mesh_statistics_report.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_multi_blade_row_batch_example.py (../../examples/multi_blade_row_batch_example.py)\n\n00:00.000\n\n0.0"},{"objectID":"Home","href":"api_reference/mesh_statistics.html#mesh_statistics","title":"mesh_statistics","text":"mesh_statistics\n\n\n\n\n\nModule for facilitating analysis of mesh statistics.\n\nClasses:\n\n\n\n\n\nclass ansys.turbogrid.core.mesh_statistics.mesh_statistics.MeshStatistics(turbogrid_instance: PyTurboGrid, domain: str = 'ALL')\n\nBases: object\n\nFacilitates analysis of mesh statistics for the current mesh in a running session of\nTurboGrid.\n\nMethods:\n\n\n\nAttributes:\n\n\n\n\n\n__init__(turbogrid_instance: PyTurboGrid, domain: str = 'ALL')\n\nInitialize the class using a connection to a running session of TurboGrid.\n\n\n\ncreate_histogram(variable: str, domain: str = 'ALL', use_percentages: bool = True, bin_units: str = '', image_file: str = '', show: bool = True) -> None\n\nCreate a histogram of mesh statistics using Matplotlib.\n\n\n\ncurrent_domain: str = ''\n\nDomain that was used for the last update of the mesh statistics. See the mesh_vars\nattribute.\n\n\n\nget_domain_label(domain: str) -> str\n\nGet suitable label text for a domain.\n\n\n\nget_mesh_statistics(variable: str = 'ALL') -> dict\n\nGet the basic mesh statistics from the cached mesh statistics.\n\n\n\nget_table_as_text() -> str\n\nGet a text version of the mesh statistics table from the cached mesh statistics.\n\n\n\nget_table_rows() -> list\n\nGet the mesh statistics table data from the cached mesh statistics.\n\n\n\ninterface: PyTurboGrid = 0\n\nInterface to a running session of TurboGrid.\n\n\n\nmesh_vars: dict = {}\n\nCache of the basic mesh statistics obtained by the last call to the\nupdate_mesh_statistics() method or from the initialization of\nthe object if this method has not been called. The name of the domain\nthese statistics relate to is stored as the current_domain\nattribute.\n\n\n\nupdate_mesh_statistics(domain: str = 'ALL') -> None\n\nRe-read the mesh statistics from TurboGrid.\n\nThis method can be used either to update the cached mesh statistics after TurboGrid\nhas remeshed or update the cached mesh statistics to use a different domain or domains.\n\n\n\nwrite_table_to_csv(file_name: str) -> None\n\nWrite the mesh statistics table to a CSV file.\n\nThe values in the mesh statistics table are obtained from the cached\nmesh statistics."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\nturbogrid_instance\n\npytg.pyturbogrid_core.PyTurboGrid\n\nRunning session of TurboGrid.\n\ndomain\n\nstr, default: \"ALL\"\n\nName of the domain to get the initial statistics from. The default is \"ALL\",\nin which case statistics are read for all domains."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\nvariable\n\nstr\n\nMesh statistics variable to use for the histogram.\n\ndomain\n\nstr, default: \"ALL\"\n\nDomain name to get statistics for. The default is \"ALL\", in which\ncase statistics for all domains are read. If a specific domain name\nis supplied, statistics are read for only this domain. Cached mesh\nstatistics are not used or affected.\n\nuse_percentages\n\nbool, default: False\n\nWhether to display the percentage values of the bin counts for\nthe histogram. The default is False, in which case the actual bin\ncounts are shown.\n\nbin_units\n\nstr, default: \"\"\n\nUnits for the mesh statistics values (x-axis labels). The default is\n\"\", in which case the current TurboGrid units are used.\n\nimage_file\n\nstr, default: \"\"\n\nName and extension for the image file to write the histogram to. The\ndefault is \"\", in which case no image file is written. The format\nis determined by the file extension (such as .png) given in the\nfile name. Available formats are those supported by Matplotlib,\nincluding \".png\", \".pdf\", and \".svg\".\n\nshow\n\nbool, default: True\n\nWhether to display the image on the screen. If False, the image is not\ndisplayed on the screen, which is only useful if the image is\nbeing written to a file."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\ndomain\n\nstr\n\nName of the domain to generate the label from."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#returns","title":"mesh_statistics > Returns","text":"Returns\n\nstr\n\n\"All Domains\" is returned if \"ALL\" is the value\nspecified for the domain parameter or \"Domain: <name>\"\nis returned if the name of a single domain is specified."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\nvariable\n\nstr, default: \"ALL\"\n\nMesh statistics variable to get statistics for. The default is\n\"ALL\", in which case a dictionary of all variables is returned."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#returns","title":"mesh_statistics > Returns","text":"Returns\n\ndict\n\nIf a single variable is specified for the variable parameter, a\ndictionary of the current mesh statistics values for the selected variable\nis returned. Otherwise, if the default value of \"ALL\" is used for the\nvariable parameter, a dictionary of dictionaries (one per variable) is\nreturned."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#returns","title":"mesh_statistics > Returns","text":"Returns\n\nstr\n\nMesh statistics table in a text version."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#returns","title":"mesh_statistics > Returns","text":"Returns\n\nlist\n\nList of row data. Each list item represents one table row. The list\nitem contains a list of the cell contents for each cell in the row."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\ndomain\n\nstr, default: \"ALL\"\n\nName of the domain to get the statistics from. The default is \"ALL\", in which\ncase statistics are read for all domains."},{"objectID":"Home","href":"api_reference/mesh_statistics.html#parameters","title":"mesh_statistics > Parameters","text":"Parameters\n\nfile_name\n\nstr\n\nName of the file to write the mesh statistics table to."},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPyTurboGrid provides access to Ansys TurboGrid from a Python environment.\n\nTo run PyTurboGrid, you must have a licensed local installation of TurboGrid 2023 R2 or later."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nThe ansys-turbogrid-core package supports Python 3.9, 3.10, 3.11 and 3.12 on Windows and Linux. Two modes\nof installation are available:\n\nUser installation\n\nDeveloper installation"},{"objectID":"Home","href":"getting_started/index.html#user-installation","title":"Getting started > User installation","text":"User installation\n\nTo use PyTurboGrid, you must install the ansys-turbogrid-core package from PyPI.\n\nTo ensure that you have the latest version of pip, run this command:\n\nTo install PyTurboGrid, run this command:"},{"objectID":"Home","href":"getting_started/index.html#developer-installation","title":"Getting started > Developer installation","text":"Developer installation\n\nA developer installation consists of cloning the pyturbogrid repository\nand installing the project in editable mode. When you install PyTurboGrid from\nsource code, you can modify and enhance the code.\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to\ncontribute to PyTurboGrid.\n\nClone the pyturbogrid repository:\n\nTo avoid incompatibilites in requirements when working in multiple\nPython projects, create and activate a virtual environment. For\nmore information, see Virtual environments in the PyAnsys\nDeveloper’s Guide.\n\nTo ensure that you have the latest version of pip, run this command:\n\nAssuming that your current working directory is the top-level directory\nof your locally cloned pyturbogrid repository, install PyTurboGrid\nfrom this local repository in editable mode by running these commands\nin the root directory:"},{"objectID":"Home","href":"getting_started/index.html#requirements","title":"Getting started > Requirements","text":"Requirements\n\nYou must have a licensed local installation of Ansys TurboGrid 2023 R2 or later.\n\nThe AWP_ROOTxxx environment variable, where xxx is the three-digit\nAnsys version, allows PyTurboGrid to find your local TurboGrid installation.\n\nA Windows installation automatically sets this root environment variable.\nFor example, if you install Ansys 2023 R2 in the default directory,\nthe installer sets the AWP_ROOT232 environment variable to\nC:\\Program Files\\ANSYS Inc\\v232.\n\nA Linux installation does not automatically set this root environment\nvariable. For example, if you install Ansys 2023 R2 in the default\ndirectory, you must manually set the AWP_ROOT232 environment\nvariable to /usr/ansys_inc/v232."},{"objectID":"Home","href":"getting_started/index.html#license-and-acknowledgments","title":"Getting started > License and acknowledgments","text":"License and acknowledgments\n\nPyTurboGrid is licensed under the MIT license.\n\nPyTurboGrid makes no commercial claim over Ansys whatsoever. This library extends the\nfunctionality of Ansys TurboGrid by adding a Python interface to TurboGrid without\nchanging the core behavior or license of the original software. The use of the\ninteractive control of PyTurboGrid requires a legally licensed local copy of TurboGrid.\n\nFor more information on TurboGrid, see the Ansys TurboGrid page on the Ansys website.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/mbr_sweep_example.html#multi-blade-row-meshing-example","title":"Multi blade row meshing example","text":"Multi blade row meshing example\n\nThis basic example shows how to set up a multi blade row meshing instance and execute it in parallel."},{"objectID":"Home","href":"examples/mbr_sweep_example.html#perform-required-imports","title":"Multi blade row meshing example > Perform required imports","text":"Perform required imports\n\nPerform the required imports. It is assumed that the ansys-turbogrid-core\npackage has been installed."},{"objectID":"Home","href":"examples/mbr_sweep_example.html#create-a-multi_blade_row-and-initialize-it","title":"Multi blade row meshing example > Create a multi_blade_row and initialize it","text":"Create a multi_blade_row and initialize it\n\nUse the Concepts NREC sample provided."},{"objectID":"Home","href":"examples/mbr_sweep_example.html#set-the-sizing-strategy-for-the-machine","title":"Multi blade row meshing example > Set the sizing strategy for the machine","text":"Set the sizing strategy for the machine\n\nIf this is omitted, the defaults for TurboGrid will be used."},{"objectID":"Home","href":"examples/mbr_sweep_example.html#sweep-a-parameter","title":"Multi blade row meshing example > Sweep a parameter","text":"Sweep a parameter\n\nIn this case, increase the global size factor, and measure the (base) layer face areas, and the element counts.\n\n\n\nDownload Jupyter notebook: mbr_sweep_example.ipynb\n\nDownload Python source code: mbr_sweep_example.py\n\nDownload zipped: mbr_sweep_example.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThese examples show how you use PyTurboGrid. If PyTurboGrid is\ninstalled on your machine, you can download these examples as Python files\nor Jupyter notebooks and run them locally.\n\nsphx_glr_examples_basic_read_inf_rotor37.py\n\nsphx_glr_examples_mbr_STAC_Example.py\n\nsphx_glr_examples_mbr_from_tginit_example.py\n\nsphx_glr_examples_mbr_sweep_example.py\n\nsphx_glr_examples_mesh_statistics_report.py\n\nsphx_glr_examples_multi_blade_row_batch_example.py\n\n\n\nDownload all examples in Python source code: examples_python.zip\n\nDownload all examples in Jupyter notebooks: examples_jupyter.zip\n\nGallery generated by Sphinx-Gallery"},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#pyturbogrid_core","title":"pyturbogrid_core","text":"pyturbogrid_core\n\nModule in the ansys-turbogrid-api package that is internally used by modules in the pyturbogrid\npackage for interactions with a running Ansys TurboGrid application.\n\n\n\n\n\nClasses:\n\n\n\n\n\nclass ansys.turbogrid.api.pyturbogrid_core.PyTurboGrid(socket_port: int | None, turbogrid_location_type: TurboGridLocationType, cfxtg_location, additional_args_str: str | None, additional_kw_args: dict | None, log_level=TurboGridLogLevel.INFO, host_ip: str = '127.0.0.1', pim_app_name: str = 'turbogrid', pim_app_ver: str = '241', log_filename_suffix: str = '')\n\nThis class enables you to launch, interact with, and quit, a session of TurboGrid.\nRefer to the launcher module to see how to create an instance of this class.\n\nAttributes:\n\n\n\nClasses:\n\n\n\nMethods:\n\n\n\n\n\nQUERY_ERROR_PREFIX = 'ERROR:'\n\n\n\n\n\nclass TurboGridLocationType(value)\n\nSpecifies whether the PyTurboGrid class should launch TurboGrid from the given location, or connect to a running session of TurboGrid.\n:member-order: bysource\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\nTURBOGRID_ANSYS_LABS = 2\n\n\n\n\n\nTURBOGRID_INSTALL = 0\n\n\n\n\n\nTURBOGRID_RUNNING_CONTAINER = 1\n\n\n\n\n\nas_integer_ratio()\n\nReturn integer ratio.\n\nReturn a pair of integers, whose ratio is exactly equal to the original int\nand with a positive denominator.\n\n>>> (10).as_integer_ratio()\n(10, 1)\n>>> (-10).as_integer_ratio()\n(-10, 1)\n>>> (0).as_integer_ratio()\n(0, 1)\n\n\n\nbit_count()\n\nNumber of ones in the binary representation of the absolute value of self.\n\nAlso known as the population count.\n\n>>> bin(13)\n'0b1101'\n>>> (13).bit_count()\n3\n\n\n\nbit_length()\n\nNumber of bits necessary to represent self in binary.\n\n>>> bin(37)\n'0b100101'\n>>> (37).bit_length()\n6\n\n\n\nconjugate()\n\nReturns self, the complex conjugate of any int.\n\n\n\ndenominator\n\nthe denominator of a rational number in lowest terms\n\n\n\nfrom_bytes(byteorder, *, signed=False)\n\nReturn the integer represented by the given array of bytes.\n\nbytes\n\nHolds the array of bytes to convert.  The argument must either\nsupport the buffer protocol or be an iterable object producing bytes.\nBytes and bytearray are examples of built-in objects that support the\nbuffer protocol.\n\nbyteorder\n\nThe byte order used to represent the integer.  If byteorder is ‘big’,\nthe most significant byte is at the beginning of the byte array.  If\nbyteorder is ‘little’, the most significant byte is at the end of the\nbyte array.  To request the native byte order of the host system, use\n`sys.byteorder’ as the byte order value.\n\nsigned\n\nIndicates whether two’s complement is used to represent the integer.\n\n\n\nimag\n\nthe imaginary part of a complex number\n\n\n\nnumerator\n\nthe numerator of a rational number in lowest terms\n\n\n\nreal\n\nthe real part of a complex number\n\n\n\nto_bytes(length, byteorder, *, signed=False)\n\nReturn an array of bytes representing an integer.\n\nlength\n\nLength of bytes object to use.  An OverflowError is raised if the\ninteger is not representable with the given number of bytes.\n\nbyteorder\n\nThe byte order used to represent the integer.  If byteorder is ‘big’,\nthe most significant byte is at the beginning of the byte array.  If\nbyteorder is ‘little’, the most significant byte is at the end of the\nbyte array.  To request the native byte order of the host system, use\n`sys.byteorder’ as the byte order value.\n\nsigned\n\nDetermines whether two’s complement is used to represent the integer.\nIf signed is False and a negative integer is given, an OverflowError\nis raised.\n\n\n\nclass TurboGridLogLevel(value)\n\nControls which logging messages are reported. The higher values report the fewest messages.\n:member-order: bysource\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\nCRITICAL = 50\n\n\n\n\n\nDEBUG = 10\n\n\n\n\n\nERROR = 40\n\n\n\n\n\nINFO = 20\n\n\n\n\n\nNETWORK_DEBUG = 15\n\n\n\n\n\nNOTSET = 0\n\n\n\n\n\nWARNING = 30\n\n\n\n\n\nas_integer_ratio()\n\nReturn integer ratio.\n\nReturn a pair of integers, whose ratio is exactly equal to the original int\nand with a positive denominator.\n\n>>> (10).as_integer_ratio()\n(10, 1)\n>>> (-10).as_integer_ratio()\n(-10, 1)\n>>> (0).as_integer_ratio()\n(0, 1)\n\n\n\nbit_count()\n\nNumber of ones in the binary representation of the absolute value of self.\n\nAlso known as the population count.\n\n>>> bin(13)\n'0b1101'\n>>> (13).bit_count()\n3\n\n\n\nbit_length()\n\nNumber of bits necessary to represent self in binary.\n\n>>> bin(37)\n'0b100101'\n>>> (37).bit_length()\n6\n\n\n\nconjugate()\n\nReturns self, the complex conjugate of any int.\n\n\n\ndenominator\n\nthe denominator of a rational number in lowest terms\n\n\n\nfrom_bytes(byteorder, *, signed=False)\n\nReturn the integer represented by the given array of bytes.\n\nbytes\n\nHolds the array of bytes to convert.  The argument must either\nsupport the buffer protocol or be an iterable object producing bytes.\nBytes and bytearray are examples of built-in objects that support the\nbuffer protocol.\n\nbyteorder\n\nThe byte order used to represent the integer.  If byteorder is ‘big’,\nthe most significant byte is at the beginning of the byte array.  If\nbyteorder is ‘little’, the most significant byte is at the end of the\nbyte array.  To request the native byte order of the host system, use\n`sys.byteorder’ as the byte order value.\n\nsigned\n\nIndicates whether two’s complement is used to represent the integer.\n\n\n\nimag\n\nthe imaginary part of a complex number\n\n\n\nnumerator\n\nthe numerator of a rational number in lowest terms\n\n\n\nreal\n\nthe real part of a complex number\n\n\n\nto_bytes(length, byteorder, *, signed=False)\n\nReturn an array of bytes representing an integer.\n\nlength\n\nLength of bytes object to use.  An OverflowError is raised if the\ninteger is not representable with the given number of bytes.\n\nbyteorder\n\nThe byte order used to represent the integer.  If byteorder is ‘big’,\nthe most significant byte is at the beginning of the byte array.  If\nbyteorder is ‘little’, the most significant byte is at the end of the\nbyte array.  To request the native byte order of the host system, use\n`sys.byteorder’ as the byte order value.\n\nsigned\n\nDetermines whether two’s complement is used to represent the integer.\nIf signed is False and a negative integer is given, an OverflowError\nis raised.\n\n\n\n__init__(socket_port: int | None, turbogrid_location_type: TurboGridLocationType, cfxtg_location, additional_args_str: str | None, additional_kw_args: dict | None, log_level=TurboGridLogLevel.INFO, host_ip: str = '127.0.0.1', pim_app_name: str = 'turbogrid', pim_app_ver: str = '241', log_filename_suffix: str = '')\n\n\n\n\n\naddSecondaryFlowPath(name: str, wall_families: list[str], hub_interface_families: list[str] = [], shroud_interface_families: list[str] = []) -> dict[str, any]\n\n\n\n\n\nalready_exited = False\n\n\n\n\n\napp_name = 'App'\n\n\n\n\n\nblock_each_message: bool = False\n\n\n\n\n\nclient_socket: socket = 0\n\n\n\n\n\nconsole_log_file: TextIOWrapper = 0\n\n\n\n\n\ndeleteThetaMesh(name: str)\n\n\n\n\n\nend_session()\n\nStop recording a session file.\n\n\n\nengine_ccl_observers: Set[ICCLChangeObserver] = {}\n\n\n\n\n\nengine_incoming_error_queue: <module 'queue' from '/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/queue.py'> = 0\n\n\n\n\n\nengine_incoming_message_queue: <module 'queue' from '/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/queue.py'> = 0\n\n\n\n\n\nengine_proc: Popen = 0\n\n\n\n\n\nengine_ready: bool = False\n\n\n\n\n\nevalCurveConstArclength(points, params) -> list[any]\n\n\n\n\n\ngenerateThetaMesh(name: str, axis: str, cad_path: str, wall_families: list[str], hubinterfacefamilies: list[str] = [], shroudinterfacefamilies: list[str] = [], hubcurvefamily: str = '', shroudcurvefamily: str = '', units: str = '') -> dict[str, any]\n\n\n\n\n\ngetAvailableDomains() -> list[str]\n\n\n\n\n\ngetAvailableThetaMeshes() -> list[str]\n\n\n\n\n\ngetBoundaryGeometry(prefix_string: str = '') -> list[any]\n\n\n\n\n\ngetTGInitContents(tginit_path: str) -> dict[str, any]\n\n\n\n\n\ngetTGInitTopology(tginit_path: str, transformIOToLines: bool = False) -> dict[str, any]\n\n\n\n\n\ngetTGInitTopologyView(tginit_path: str, transformIOToLines: bool = False, name: str = 'machine_topo') -> dict[str, any]\n\n\n\n\n\ngetThetaMesh(name: str) -> list[any]\n\n\n\n\n\ngetThetaMeshHistogram(sfp_name, variable: str) -> dict[str, any]\n\n\n\n\n\nget_object_param(object: str, param: str) -> str\n\nReturns the parameter value.\n\n\n\nget_version() -> str\n\nGet the version of the application which is being run in the current session.\n\n\n\nhost_ip: str = '127.0.0.1'\n\n\n\n\n\nlog_filename_suffix: str = ''\n\n\n\n\n\noutgoing_log_file: TextIOWrapper = 0\n\n\n\n\n\nprint_messages_in_console: bool = False\n\n\n\n\n\nproc_port: int | None = None\n\n\n\n\n\nprocessTGInitTopology(transformIOToLines: bool, tginit_topology: dict[str, any], tginit_topo_dict)\n\n\n\n\n\nprocess_log_file: TextIOWrapper = 0\n\n\n\n\n\npyengine_log_level: ServerLogLevel = 20\n\n\n\n\n\nquery_average_background_face_area() -> float\n\nReturns the average background face area, averaged again from the hub, midspan and shroud.\n\n\n\nquery_average_base_face_area() -> float\n\nReturns the average base face area, averaged again from each layer.\n\n\n\nquery_mesh_statistics(domain: str = 'ALL') -> dict\n\nReturns mesh quality measures from TurboGrid for the current session and specified domain. Note: It is suggested to use the mesh_statistics module instead of directly calling this.\n\n\n\nquery_mesh_statistics_histogram_data(variable: str, domain: str = 'ALL', number_of_bins: int = 20, upper_bound: float | None = None, lower_bound: float | None = None, bin_units: str = '', scale: str = 'Linear', use_absolute_values: bool = False, bin_divisions: list | None = None) -> dict\n\nReturns data that can be used to plot mesh statistics histograms.\n\n\n\nquery_number_of_spanwise_elements() -> int\n\nReturns the total number of elements in the spanwise direction.\n\n\n\nquery_valid_topology_choices() -> list\n\nReturns the permitted topology methods for the blade geometry in the current session.\n\n\n\nquit()\n\nQuit the application instance.\n\n\n\nread_inf(filename: str)\n\nRead a blade model from a BladeGen *.inf file.\n\n\n\nread_message_process: CUEEngineReadMessageService = 0\n\n\n\n\n\nread_ndf(ndffilename: str, cadfilename: str = '', flowpath: str = '', bladerow: str = '', bladename: str = '')\n\nRead a blade model from an NDF (*.ndf) file. TurboGrid uses the details in the NDF file to generate and import a CAD file containing the blade geometry.\n\n\n\nread_session(filename: str)\n\nRead a session file to repeat a previous session.\n\n\n\nread_state(filename: str)\n\nRestore a previous state from a saved state file.\n\n\n\nread_tginit(path: str, bladerow: str = '', secondary: list[str] = [], autoregions: bool = True, includemesh: bool = True)\n\nRead a blade row from a *.tginit file.\n\n\n\nrun_read_message_process: bool = True\n\n\n\n\n\nrun_send_message_process: bool = True\n\n\n\n\n\nsave_image(filename: str, format: str = 'png')\n\nSave the current contents of the viewer window to a file.\n\n\n\nsave_mesh(filename: str, onefile: bool = True, onedomain: bool = True, addsecondary: bool = True)\n\nSave generated mesh to a file.\n\n\n\nsave_state(filename: str)\n\nSave the current state into a file.\n\n\n\nsend_ccl(ccl: str) -> bool\n\nSend the provided CCL to the application.\n\n\n\nsend_message_process: CUEEngineSendMessageService = 0\n\n\n\n\n\nset_global_size_factor(global_size_factor: str)\n\nSet the global size factor.\n\n\n\nset_inlet_hub_position(parametric_hub_location: str)\n\nSet the parametric position of the inlet line on the hub.\n\n\n\nset_inlet_shroud_position(parametric_shroud_location: str)\n\nSet the parametric position of the inlet line on the shroud.\n\n\n\nset_obj_param(object: str, param_val_pairs: str)\n\nUpdate the value for a CCL object parameter.\n\n\n\nset_outlet_hub_position(parametric_hub_location: str)\n\nSet the parametric position of the outlet line on the hub.\n\n\n\nset_outlet_shroud_position(parametric_shroud_location: str)\n\nSet the parametric position of the outlet line on the shroud.\n\n\n\nset_topology_choice(atm_topology_choice: str)\n\nSet the topology method to be used for the topology set generation process.\n\nExample\n\n>>> turbogrid.set_topology_choice(\"Single Round Round Refined\")\n\n\n\nset_topology_list(atm_topology_list: str)\n\nSet the list of topology pieces to be used for topology generation.\n\nExample\n\n>>> turbogrid.set_topology_list(\"LECircleHigh_TECircleLow\")\n\n\n\nstart_session(filename: str)\n\nStart recording a new session.\n\n\n\nsuspend(object: str)\n\nSuspend a TurboGrid object.\n\n\n\nunsuspend(object: str)\n\nUnsuspend a TurboGrid object.\n\n\n\nwrite_theta_mesh(name: str, filename_no_ext: str)\n\n"},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nobject\n\nstr\n\nName with full path for the CCL object.\n\nparam\n\nstr\n\nName of the parameter to get."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nstr\n\nThe parameter value."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nThe application version e.g. ‘24.1’."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nfloat\n\nAverage Area in base units ^ 2."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nfloat\n\nAverage Area in base units ^ 2."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\ndomain\n\nstr, default: \"ALL\"\n\nName of the domain from which to obtain the measurements."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\ndict\n\nA dictionary form of the quality measurements."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nvariable\n\nstr\n\nName of the quality measurement to query from the statistics.\n\ndomain\n\nstr, default: \"ALL\"\n\nName of the domain from which to obtain the measuments.\n\nnumber_of_bins\n\nint, default: 20\n\nNumber of histogram columns to use.\n\nupper_bound\n\nfloat, default: None\n\nThe maximum limit for the horizontal axis.\n\nlower_bound\n\nfloat, default: None\n\nThe minimum limit for the horizontal axis.\n\nbin_units\n\nstr, default: \"\"\n\nThe unit to use for the horizontal axis.\n\nscale\n\nstr, default: \"Linear\"\n\nScaling type for the horizontal axis: “linear” or “logarithmic”.\n\nuse_absolute_values\n\nbool, default: False\n\nChoice of whether to use absolute or percentage values on the vertical axis.\n\nbin_divisions\n\nlist, default: None\n\nUser-provided bin divisions."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\ndict\n\nA dictionary form of the statistics for the requested quality measurement."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nint\n\nNumber of elements."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#returns","title":"pyturbogrid_core > Returns","text":"Returns\n\nlist\n\nList of topology method names."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName or path for the Bladegen *.inf file."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nndffilename\n\nstr\n\nName or path for the NDF (*.ndf) file.\n\ncadfilename\n\nstr, default: \"\"\n\nName of the CAD *.x_b file to be generated.\n\nflowpath\n\nstr, default: \"\"\n\nName of the flowpath to use.\n\nbladerow\n\nstr, default: \"\"\n\nName of the blade row to select.\n\nbladename\n\nstr, default: \"\"\n\nName of the blade to load."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the session file."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the state file."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\npath\n\nstr\n\nName or path for the TGInit (*.tginit) file.\n\nbladerow\n\nstr, default: \"\"\n\nOptional blade row to be read, no entry corresponds to the first blade row.\n\nsecondary\n\nlist[str], default: []\n\nA list of the secondary flow paths to include in the simulation.\n\nautoregions\n\nbool, default: True\n\nAutomatically generate opening regions in the passage inlet/outlet block to match the secondary flow path geometry.\n\nincludemesh\n\nbool, default: True\n\nWhen set to true, the 3D secondary flow path meshes, along with their 2D boundaries, will be computed."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the image file to be created.\n\nformat\n\nstr, default: \"png\"\n\nFormat of the saved image. Valid values are:\n\n“png”: PNG\n\n“avz”: AVZ (3D)\n\n“glb2: GLB (3D) (Beta)\n\n“jpg”: JPEG\n\n“ppm”:PPM\n\n“ps”: PostScript (incomplete support)\n\n“eps”: Encapsulated PS (incomplete support)"},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the mesh file to save.\n\nonefile\n\nbool, default: True\n\nIf enabled (true), write all of the available meshes to a single mesh file.\n\nonedomain\n\nbool, default: True\n\nIf enabled (true), combine any inlet and outlet domain meshes with the passage domain, to form a single assembly.\n\naddsecondary\n\nbool, default: True\n\nIf enabled (true), any meshed secondary flow paths will be added to the mesh file."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the file to save."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nccl\n\nstr\n\nThe CCL to send."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nglobal_size_factor\n\nstr\n\nValue to use as size factor in string format."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nparametric_hub_location\n\nstr\n\nValue to be used as parametric location in string format."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nparametric_shroud_location\n\nstr\n\nValue to be used as parametric location in string format."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nobject\n\nstr\n\nName with full path for the CCL object.\n\nparam_val_pairs\n\nstr\n\nName and value pair for the parameter to set."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nparametric_hub_location\n\nstr\n\nValue to be used as parametric location in string format."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nparametric_shroud_location\n\nstr\n\nValue to be used as parametric location in string format."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\natm_topology_choice\n\nstr\n\nName of the topology method to be used."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\natm_topology_list\n\nstr\n\nThe topology piece names concatenated using underscores."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nfilename\n\nstr\n\nName of the session file."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nobject\n\nstr\n\nString specifying the name and type of the object to be suspended."},{"objectID":"Home","href":"api_reference/pyturbogrid_core.html#parameters","title":"pyturbogrid_core > Parameters","text":"Parameters\n\nobject\n\nstr\n\nString specifying the name and type of the object to be unsuspended."}]